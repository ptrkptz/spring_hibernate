
170 - overview of Hibernate
	framework for persisting / saving Java object in a database
	www.hibernate.org

	benefits
		handles all low level sql 
		minimize the amt of JDBC code you have to develop
		H provides Object to Relational Mapping (ORM)

	Save java object w/ H
		//create Java Object
		Student theStudent = new Student("John", "Doe","email@email.com");
		//save to DB
		int theId = (Integer) session.save(theStudent);
	Retrieve java object w/ H
		//retrieve
		Student myStudent = session.get(Student.class, theId)
	Query for Java object
		Query query = session.createQuery("fromStudent");
		List<Student> students = query.list();

171 - H & jdbc
	
172-h requires java 8

173 - setup H dev env
174 - install mysql on windows

174 - install mysql on mac
175 - install mysql db
176 - setting up H
177 -  set up H
178 - test jdbc

447 - Spring REST what are REST web services #1
	REST calls can be made over HTTP
	REST is language independent

448 - Spring REST what are REST web services #2
	where to find other REST APIs
		www.programmableweb.com

449 - JSON basis
	JavaScript Object Notation
	lightweight
	any language can use

	


Easier to start
min amt of manual config
- peform auto config based on props files and JAR classpath
helps resolve dependency conflicts (maven or gradle)
provide an embedded HTTP server = quick start
- tomcat, jetty, undertow

Spring Initializr -- http://start.spring.io
	quick start spring project
	select dependencies
	create maven/gradle
	import the project to IDE

spring boot embedded server
	not need to install a server separately
		JAR file includes your application code AND includes the server
			self-contained -- nothing to install

Running SB apps
	can be run stand-alone -- includes server
	can be run from CLI, or IDE
		java -jar mycoolapp.jar

Deploying SB apps
	can be deployed in traditional way
	deploy WAR file to ext server


508
Spring Boot initialr
	start.spring.io	
		used to 'start' project
			download and import via STS Maven
	When done importing may have error on POM
		add <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
			within java.version section
				<properties>
					<java.version>1.8</java.version>
					<maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
				</properties>
	Bootstrap the Spring Boot app
		SpringApplication.run(MycoolApplication.class, args)

	'Run As' > 'Java Application'
	


509 - REST API controler w/ spring boot
	@RestController
		
	@GetMapping("/")


510 - exploring the SB project structure
	mvnw - maven wrapper
		don't need maven in your classpath... will download if needed
			execute via ex.
				-mvnw clean install
		you can delete or ignore if maven installed locally

	pom
		spring-boot-starter-web
			contains spring-web, spring-webmvc, hibernate-validator, tomcat, json
		spring-boot-maven-plugin
			used to package (as war or jar) and run
				* use mvnw if Maven is not installed, else mvn
				mvnw package (or mvn package)
				mvnw spring-boot:run (or mvn spring-boot:run)

	SpringBootApplication
		enables:
			Auto configuration
				@EnableAutoConfiguration - Enables SB's auto-config support
			component scanning
				@ComponentScan - Enables component scanning of current pkg.  Also recursively scans sub-pkg
					- SAME AS SPRING BATCH
			add'l config
				@Configuration - Able to register extra beans w/ @Bean or import other config classes
					- SAME AS SPRING BATCH

	SpringApplication
		Bootstrap your SB application


511 -  exploring the SB project structure, PArt 2
	Best practice -- Place your main app class in the root pkg above your other pkgs
		common pitfall

	pkg structure
		Main SB application class - automatically component scans sub-pkg

	Component scanning
		default scanning is fine if everything is UNDER your top level pkg
		Other pkg?
			explicity state pkg
				@SpringBootApplication(
					scanBasePackages={"org.acme.iot.utils", "edu.tst.me"})
				public class myApplication {
					...
				}
				Could be error prone
	Application Properties
		by default, SB will load properties from: application.properties
			- created by spring initialzr
			- can added server.port=8585
			- add custom properties
				coach.name=Mickey Mouse
		how to read from:
			by use of injection
				@Value("$coach.name")
				private String coachName;
				
				@Value("$team.name")
				private String teamName;
				
	/static directory
		by default SB will load resources in here automatically
			ex - HTML files, CSS, JS
	
	WARNING - DO NOT USE src/min/webapp if your application is pkg as a jar
			only works with WAR

	Unit Tests

512 - SB starter - curated list of dependencies
	collection of dependencies grouped together
	tested and verified by spring dev teams
	easier to get started
	reduce amt of mvn config

	instead of all the MVC can use spring-boot-starter-web
		everything in spring-boot-starter-web is compatible, you dont need to test it all

	in the initialzr - in dependency section, adding web, jpa, etc will automatically be in the pom	

	30+ SB starter
		spring-boot-starter-web
			building web apps, including validation, REST, (TC as default)
		spring-boot-starter-security
			add spring security
		spring-boot-starter-data-jpa
			db support w/ jpa and hibernate
			

	what is a starter?
		- www.luv2code.com/spring-boot-starters (full list of starters)
		- use IDE to view the feature -- expand them out
			from POM > dep hierarchy, you can then expand out

513 - SB - parents for SB starter
	Parent is included in the initialzr
		has default compiler (currently java 8)
		utf-8 
		others

	to override a default from the parent, set a property
		<properties>
			<java.version>10</java.version>
		</properties>
		
	If you use the parent, you declare the parent version and then there is no need to declare a version on other dep, they are inherited from the parent
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.0.RELEASE</version>
		<relativePath/>
	<parent>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
	</dependencies>

	NO NEED TO LIST VERSION... IT IS FROM THE PARENT
		GREAT FOR MAINTENANCE


514 - SB dev tools
	spring-boot-devtools
		auto restarts when code is updated
		add dep to pom file
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-devtools</artifactId>
			</dependency>
		more detail - luv2code.com/devtools-docs

	step-by-step
		1) edit pom.xml and add spring-boot-devtools
		2) add new REST endpoint to our app
		3) verify app is auto reload
			watch console log

	create new endpoint
		in the RestController add:
			@GetMapping("/workout")
			public String getDailyWorkout() {
				return "Run a hard 5k!";
			}

515 - SB Actuator - overview
	how to montior and manage my app?
	how to check app health?
	how to access app metrics ?

	add a new dependency
		spring-boot-starter-actuator
			automatically exposes endpoints for metrics out of the box
				DevOps functionality
			endpoint are prefixed with: /actuator
				/health - health of app
					check if up or down
				/info  - info about project
					 default = empty
					 update application.properties
					 	Ex.
					 	info.app.name=testing
					 	info.app.description=some app
					 	info.app.version=1.0.0
					 key off 'info.' for /info endpoint
				/auditevents - audit events of app
				/beans - list of all beans registered
					localhost:8080/actuator/beans
				/mappings - list of all @RequestMappings

				FULL LIST of actuators: luv2code.com/acutator-endpoints
				
			default only /health and /info are expose
				expose all: in application.properties
					management.endpoints.web.exposure.include=*
						need to be aware that you will expose EVERYTHING... security around this later


516 - SB - SB actuator - accessing actuator
	add dep
		<!-- Add support for actuator -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		
	upon startup you will see actuator info in console
		Exposing 2 endpoint(s) beneath base path '/actuator' 
	
	All endpoints are prefixed with /actuator
		http://localhost:8080/actuator/health
		http://localhost:8080/actuator/info
	update application.properties for additional info
	
	JSON pretty print
		Chrome needes to be updated
			https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa/related
		Firefox has it built in	

	Add other endpoints		
		# wildcard '*" to expose all endpoints
		# can also expose individual endpoints w/ a comma-delimited list
		management.endpoints.web.exposure.include=*
		
	http://localhost:8080/actuator/threaddump
		useful for analyzing and profiling your application's performance
		
	http://localhost:8080/actuator/mappings
		all request mappings for your app
		useful for finding out what request mappings are available
		
517 - SB actuator security
	you don't want to expose all the data to ANYONE
	add dependency for security
	will prompt for username/pwd
		default:
			un: user
			pwd: [in the console]
				ex.
					2019-11-27 10:03:31.052  INFO 10412 --- [  restartedMain] .s.s.UserDetailsServiceAutoConfiguration : 					
					Using generated security password: eff16d33-b21e-4e3b-a27c-3402a5e49aa2
		override:
			add to application.properties
				spring.security.user.name=scott
				spring.security.user.password=test	
		customize:
			use regular spring security using DB	
	exclude endpoints
		management.endpoints.web.exposure.exclude=health,info
	more details
		luv2code.com/actuator-docs
		
518 - SB - run from Command-line
	option 1: java -jar
		java -jar mycoolapp.jar
	option 2: use spring boot maven plugin
		mvnw allows you to run a maven project
		
		<plugin>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-maven-plugin</artifactId>
		</plugin>
			this allows us to run it
		
		
519 - run SB apps from the CLI
	in 04-command-line-demo
		we deleted the actuator and security dependencies
	from CLI
		navigate to 04 dir
			mvnw package
				will create a jar file in target
		after built, nav to target directory and then run:
			java -jar mycoolapp-0.0.1-SNAPSHOT.jar

			This will start the application, and can use UI
	Use SB Maven plugin
		mvnw spring-boot:run

520 - inject custom app properties
	need app prop to be config (no hard coded values)
	need to read app config from prop file
		USE APP Prop file!!
			Location: src/main/resources/application.properties
			ANY custom prop
			Use @Value to access 

521 - config sb server
	in the application.properties files was getting warnings
		xxxx is an unknown property
			to remove warning > Window -> preferences -> spring -> boot -> properties editor. Here, select 'unknown property' as ignore

522 - SB properties
	application.properties
		server port, context path, actuator, security
		over 1000 properties available for SB
			luv2code.com/spring-boot-props
			groups
				core, web, security, data, actuator, integration, devtools, testing
				CORE - logging levels
					- logging.file (luv2code.com/spring-boot-logging)
				WEB - server port
						server.port=7070
					session timeouts
						server.servlet.session.timeout=15m (15 minutes)
				ACTUATOR -	as mentioned above
				SECURITY 
					default usernames
					default passwords
				DATA - JDBC urls
					spring.datasource.url=jdbc:mysql://localhost:3306/ecommerce
					spring.datasource.username=scott
					spring.datasource.password=test

		Using context-path
			server.servlet.context-path=/mycoolapp
				-- http://localhost:7070/mycoolapp/workout

522 - REST CRUD 
	high level info
523 - CRUD setup

524 - create DAO
	JPA - java persistance api

	 

